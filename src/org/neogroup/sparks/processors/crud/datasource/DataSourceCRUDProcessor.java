
package org.neogroup.sparks.processors.crud.datasource;

import org.neogroup.sparks.models.*;
import org.neogroup.sparks.commands.crud.CRUDCommand;
import org.neogroup.sparks.processors.crud.CRUDProcessor;

import javax.sql.DataSource;
import java.sql.*;
import java.util.*;

public abstract class DataSourceCRUDProcessor<R extends Model> extends CRUDProcessor<R> {

    private final DataSource source;
    private EntityTableMetadata modelTableMetadata;

    public DataSourceCRUDProcessor() {
        this.source = createDataSource();
        this.modelTableMetadata = getResourceTableMetadata (modelClass);
    }

    protected DataSource getDataSource () {
        return source;
    }

    protected EntityTableMetadata getModelTableMetadata() {
        return modelTableMetadata;
    }

    @Override
    protected R create(R resource, Map<String, Object> params) {

        try {
            DataSource source = getDataSource();
            Connection connection = source.getConnection();

            int parameterIndex;
            List<Object> sqlParameters = new ArrayList<>();

            StringBuilder sql = new StringBuilder();
            sql.append("INSERT INTO ");
            sql.append(modelTableMetadata.getTableName());
            sql.append(" (");

            parameterIndex = 1;
            for (EntityColumnMetadata columnMetadata : modelTableMetadata.getColumnMetadatas()) {
                if (!columnMetadata.isAutoGenerated()) {
                    if (parameterIndex > 1) {
                        sql.append(",");
                    }
                    sql.append(columnMetadata.getColumnName());
                    parameterIndex++;
                }
            }
            sql.append(") VALUES (");
            parameterIndex = 1;
            for (EntityColumnMetadata columnMetadata : modelTableMetadata.getColumnMetadatas()) {
                if (!columnMetadata.isAutoGenerated()) {
                    if (parameterIndex > 1) {
                        sql.append(",");
                    }
                    sql.append("?");
                    sqlParameters.add(columnMetadata.getField().get(resource));
                    parameterIndex++;
                }
            }
            sql.append(")");

            PreparedStatement statement = connection.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            parameterIndex = 1;
            for (Object sqlParameter : sqlParameters) {
                statement.setObject(parameterIndex++, sqlParameter);
            }

            int affectedRows = statement.executeUpdate();

            if (affectedRows != 0) {
                parameterIndex = 1;
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    for (EntityColumnMetadata columnMetadata : modelTableMetadata.getColumnMetadatas()) {
                        if (columnMetadata.isAutoGenerated()) {
                            if (generatedKeys.next()) {
                                columnMetadata.getField().set(resource, generatedKeys.getObject(parameterIndex++));
                            } else {
                                throw new SQLException("Expecting generated value");
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex) {
            throw new RuntimeException ("Error creating resource", ex);
        }
        return resource;
    }

    @Override
    protected R update(R resource, Map<String, Object> params) {

        try {
            DataSource source = getDataSource();
            Connection connection = source.getConnection();

            int parameterIndex;
            List<Object> sqlParameters = new ArrayList<>();

            StringBuilder sql = new StringBuilder();
            sql.append("UPDATE ");
            sql.append(modelTableMetadata.getTableName());
            sql.append(" SET ");
            parameterIndex = 1;
            for (EntityColumnMetadata columnMetadata : modelTableMetadata.getColumnMetadatas()) {
                if (!columnMetadata.isId()) {
                    if (parameterIndex > 1) {
                        sql.append(",");
                    }
                    sql.append(columnMetadata.getColumnName());
                    sql.append("=");
                    sql.append("?");
                    sqlParameters.add(columnMetadata.getField().get(resource));
                    parameterIndex++;
                }
            }
            sql.append(" WHERE ");
            parameterIndex = 1;
            for (EntityColumnMetadata columnMetadata : modelTableMetadata.getColumnMetadatas()) {
                if (columnMetadata.isId()) {
                    if (parameterIndex > 1) {
                        sql.append(" AND ");
                    }
                    sql.append(columnMetadata.getColumnName());
                    sql.append("=");
                    sql.append("?");
                    sqlParameters.add(columnMetadata.getField().get(resource));
                    parameterIndex++;
                }
            }

            PreparedStatement statement = connection.prepareStatement(sql.toString());

            parameterIndex = 1;
            for (Object sqlParameter : sqlParameters) {
                statement.setObject(parameterIndex++, sqlParameter);
            }

            int affectedRows = statement.executeUpdate();
        }
        catch (Exception ex) {
            throw new RuntimeException("Error updating resource", ex);
        }

        return resource;
    }

    @Override
    protected R delete(R resource, Map<String, Object> params) {

        try {
            DataSource source = getDataSource();
            Connection connection = source.getConnection();

            int parameterIndex;
            List<Object> sqlParameters = new ArrayList<>();

            StringBuilder sql = new StringBuilder();
            sql.append("DELETE FROM ");
            sql.append(modelTableMetadata.getTableName());
            sql.append(" WHERE ");
            parameterIndex = 1;
            for (EntityColumnMetadata columnMetadata : modelTableMetadata.getColumnMetadatas()) {
                if (columnMetadata.isId()) {
                    if (parameterIndex > 1) {
                        sql.append(" AND ");
                    }
                    sql.append(columnMetadata.getColumnName());
                    sql.append("=");
                    sql.append("?");
                    sqlParameters.add(columnMetadata.getField().get(resource));
                    parameterIndex++;
                }
            }

            PreparedStatement statement = connection.prepareStatement(sql.toString());
            parameterIndex = 1;
            for (Object sqlParameter : sqlParameters) {
                statement.setObject(parameterIndex++, sqlParameter);
            }

            int affectedRows = statement.executeUpdate();
        }
        catch (Exception ex) {
            throw new RuntimeException("Error deleting resource", ex);
        }

        return resource;
    }

    @Override
    protected List<R> retrieve(ModelFilter filters, List<ModelSorter> orders, Map<String, Object> params) {

        List<R> resources = new ArrayList<>();
        try {
            DataSource source = getDataSource();
            Connection connection = source.getConnection();

            List<Object> sqlParameters = new ArrayList<>();

            StringBuilder sql = new StringBuilder();
            sql.append("SELECT * FROM ");
            sql.append(modelTableMetadata.getTableName());

            if (filters != null) {
                sql.append(" WHERE ");
                buildFilterSQL(filters, sql, sqlParameters);
            }

            if (orders != null) {
                sql.append(" ORDER BY ");
                Iterator<ModelSorter> orderIterator = orders.iterator();
                while (orderIterator.hasNext()) {
                    ModelSorter order = orderIterator.next();
                    EntityColumnMetadata columnMetadata = modelTableMetadata.getColumnMetadataByPropertyName(order.getProperty());
                    sql.append(columnMetadata.getColumnName());
                    sql.append(" ");
                    switch (order.getDirection()) {
                        case ASC:
                            sql.append("ASC");
                            break;
                        case DESC:
                            sql.append("DESC");
                            break;
                    }
                    if (orderIterator.hasNext()) {
                        sql.append(",");
                    }
                }
            }

            if (params != null) {
                if (params.containsKey(CRUDCommand.START_PARAMETER)) {
                    sql.append(" START ");
                    sql.append(params.get(CRUDCommand.START_PARAMETER));
                }
                if (params.containsKey(CRUDCommand.LIMIT_PARAMETER)) {
                    sql.append(" LIMIT ");
                    sql.append(params.get(CRUDCommand.LIMIT_PARAMETER));
                }
            }

            PreparedStatement statement = connection.prepareStatement(sql.toString());
            int parameterIndex = 1;
            for (Object sqlParameter : sqlParameters) {
                statement.setObject(parameterIndex++, sqlParameter);
            }

            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                R resource = createResourceFromResultSet(resultSet);
                resources.add(resource);
            }
        }
        catch (Exception ex) {
            throw new RuntimeException("Error retrieving resources", ex);
        }

        return resources;
    }

    private void buildFilterSQL(ModelFilter filter, StringBuilder sql, List<Object> sqlParameters) {

        if (filter instanceof ModelFilterGroup) {
            ModelFilterGroup resourceFilterGroup = (ModelFilterGroup)filter;
            sql.append("(");
            Iterator<ModelFilter> resourceFilterIterator = resourceFilterGroup.getFilters().iterator();
            while (resourceFilterIterator.hasNext()) {
                ModelFilter childModelFilter = resourceFilterIterator.next();
                buildFilterSQL(childModelFilter, sql, sqlParameters);

                if (resourceFilterIterator.hasNext()) {
                    switch (resourceFilterGroup.getConnector()) {
                        case AND:
                            sql.append(" AND ");
                            break;
                        case OR:
                            sql.append(" OR ");
                            break;
                    }
                }
            }
            sql.append(")");
        }
        else if (filter instanceof ModelPropertyFilter) {
            ModelPropertyFilter resourcePropertyFilter = (ModelPropertyFilter)filter;
            EntityColumnMetadata columnMetadata = modelTableMetadata.getColumnMetadataByPropertyName(resourcePropertyFilter.getProperty());
            switch (resourcePropertyFilter.getOperator()) {
                case ModelPropertyOperator.EQUALS:
                    sql.append(columnMetadata.getColumnName());
                    sql.append("=");
                    sql.append("?");
                    sqlParameters.add(resourcePropertyFilter.getValue());
                    break;
                case ModelPropertyOperator.DISTINCT:
                    sql.append(columnMetadata.getColumnName());
                    sql.append("!=");
                    sql.append("?");
                    sqlParameters.add(resourcePropertyFilter.getValue());
                    break;
                case ModelPropertyOperator.GREATER_THAN:
                    sql.append(columnMetadata.getColumnName());
                    sql.append(">");
                    sql.append("?");
                    sqlParameters.add(resourcePropertyFilter.getValue());
                    break;
                case ModelPropertyOperator.GREATER_OR_EQUALS_THAN:
                    sql.append(columnMetadata.getColumnName());
                    sql.append(">=");
                    sql.append("?");
                    sqlParameters.add(resourcePropertyFilter.getValue());
                    break;
                case ModelPropertyOperator.LESS_THAN:
                    sql.append(columnMetadata.getColumnName());
                    sql.append("<");
                    sql.append("?");
                    sqlParameters.add(resourcePropertyFilter.getValue());
                    break;
                case ModelPropertyOperator.LESS_OR_EQUALS_THAN:
                    sql.append(columnMetadata.getColumnName());
                    sql.append("<=");
                    sql.append("?");
                    sqlParameters.add(resourcePropertyFilter.getValue());
                    break;
                case ModelPropertyOperator.CONTAINS:
                    sql.append(columnMetadata.getColumnName());
                    sql.append(" LIKE ");
                    sql.append("?");
                    sqlParameters.add("%" + resourcePropertyFilter.getValue() + "%");
                    break;
                case ModelPropertyOperator.NOT_CONTAINS:
                    sql.append(columnMetadata.getColumnName());
                    sql.append(" NOT LIKE ");
                    sql.append("?");
                    sqlParameters.add("%" + resourcePropertyFilter.getValue() + "%");
                    break;
                case ModelPropertyOperator.IN: {
                    sql.append(columnMetadata.getColumnName());
                    sql.append(" IN ");
                    sql.append("(");
                    Collection valueCollection = (Collection) resourcePropertyFilter.getValue();
                    Iterator valueCollectionIterator = valueCollection.iterator();
                    while (valueCollectionIterator.hasNext()) {
                        Object singleValue = valueCollectionIterator.next();
                        sql.append("?");
                        sqlParameters.add(singleValue);
                        if (valueCollectionIterator.hasNext()) {
                            sql.append(",");
                        }
                    }
                    sql.append(")");
                    break;
                }
                case ModelPropertyOperator.NOT_IN: {
                    sql.append(columnMetadata.getColumnName());
                    sql.append(" NOT IN ");
                    sql.append("(");
                    Collection valueCollection = (Collection) resourcePropertyFilter.getValue();
                    Iterator valueCollectionIterator = valueCollection.iterator();
                    while (valueCollectionIterator.hasNext()) {
                        Object singleValue = valueCollectionIterator.next();
                        sql.append("?");
                        sqlParameters.add(singleValue);
                        if (valueCollectionIterator.hasNext()) {
                            sql.append(",");
                        }
                    }
                    sql.append(")");
                    break;
                }
            }
        }
    }

    protected EntityTableMetadata getResourceTableMetadata (Class<? extends R> resourceClass) {
        return null;
    }

    protected R createResourceFromResultSet (ResultSet resultSet) {
        return null;
    }

    protected abstract DataSource createDataSource();
}
